const MiniCssPlugin = require('mini-css-extract-plugin');
const glob = require('glob-all');
var path = require('path');
const entryPlus = require('webpack-entry-plus');
const RebuildChangedPlugin = require('rebuild-changed-entrypoints-webpack-plugin');
const FileManagerPlugin = require('filemanager-webpack-plugin');
var SpritesmithPlugin = require('webpack-spritesmith');
var ProgressBarPlugin = require('progress-bar-webpack-plugin');
var WebpackNotifierPlugin = require('webpack-notifier');
const PurgecssPlugin = require('purgecss-webpack-plugin');

const entryFiles = [
  {
    entryFiles: glob.sync(['./scss/**/!(_*)/*.scss', './img/!(sprites)']),
    outputName(item) {
      const full = item.replace('scss/', '../dist/css/');
      var split = full.replace(".scss", "");
      return split;
    }
  }
];

module.exports = {
  entry: entryPlus(entryFiles),
  stats: 'errors-only',
  module: {
    rules: [
      {
        test: /\.(gif|png|jpe?g|svg)$/i,
        use: [
          'file-loader?name=[name].[ext]&outputPath=./img/',
          {
            loader: 'image-webpack-loader'
          }
        ]
      },
      {
        test: /\.scss$/,
        exclude: /node_modules/,
        use: [
          {
            loader: MiniCssPlugin.loader
          },
          {
            loader: 'css-loader'
          },
          {
            loader: 'postcss-loader',
            options: {
              ident: 'postcss',
              plugins: [
                require('autoprefixer')
              ]
            }
          },
          {
            loader: 'sass-loader'
          }
        ]
      },
      {
        test: /\.css$/,
        loader: 'string-replace-loader',
        options: {
          search: '@charset "UTF-8";',
          replace: '',
        }
      }
    ]
  },
  resolve: {
    modules: ["node_modules", "spritesmith-generated"],
    extensions: ['.scss', '.js']
  },
  plugins: [
    new MiniCssPlugin(),
    new RebuildChangedPlugin({
      cacheDirectory: __dirname
    }),
    new FileManagerPlugin({
      onStart: [
        {
          mkdir: [
            "./dist/css/default"
          ]
        }
      ],
      onEnd: [
        {
          copy: [
            { 
              source: './dist/css/default/', destination: './dist/css/'
            }
          ],
          delete: [
            "./dist/css/**/*.js",
            "./dist/css/**/*.js.map",
            "./dist/css/default",
            "./dist/img/*.js",
            "./dist/img/*.js.map"
          ]
        }
      ]
    }),
    new SpritesmithPlugin({
      src: {
          cwd: path.resolve(__dirname, 'img/sprites'),
          glob: '*.png'
      },
      target: {
          image: path.resolve(__dirname, 'dist/img/sprites.png'),
          css: path.resolve(__dirname, 'scss/_commons/_components/_media/sprites.scss')
      },
      apiOptions: {
          cssImageRef: "~sprite.png"
      }
    }),
    /* new PurgecssPlugin({
      paths: glob.sync(['./*.php', './php/*.php'])
    }),*/
    new ProgressBarPlugin(),
    new WebpackNotifierPlugin({
      title: 'Porfolio building process ...'
    })
  ]
}

/*------------------------------------------------------------------

Project:        Porfolio

Version:        1.0

Author:         Maria Sannez

Features:       WEBPACK CONFIGURATION           

                - DEV and BUILD modes configured with different tasks according to the needs
                - Removes every .JS generated by Webpack from every .CSS file
                - Shows a progress bar while it's building and not the defined unclear stats
                - Browser reloader using a script in the file you want to check (DEV mode)
                - Shows a message notification when it's built

                SCSS | CSS

                - Uses SCSS LINT to keep .SCSS files clean and readable (DEV mode)
                - Compiles .SCSS files and puts them in /dist/css folder
                - Watches for changes and compiles the changed .SCSS files only (DEV mode)
                - Generates a source map for every .CSS file (DEV mode)
                - Adds prefixes to all the CSS properties that need them
                - Groups media queries in .CSS files (BUILD mode)
                - Minifies .CSS files and removes duplicated properties (BUILD mode)
                - (?) Removes unused CSS with PurgeCSS (BUILD mode)

                IMAGES

                - Generates a sprite from the /sprites dir images
                - Optimizates images and puts them in /dist/img/ folder
                (+) - Creates multiple images from one source image and returns a srcset
                (+) - Progressive image loading

                FONTS

                - 

                CACHE

                -

                HTML

                - 

                AMP 

                - Generates an unique AMP folder for CSS

                ACCESIBILITY

                -

                SEO

                -

                JS 

                - 

                AMP 

                -

                PHP 

                - The browser reload script in the index.html file is only visible in DEV mode

                GIT

                - 

-------------------------------------------------------------------*/

